version: "3.3"
services:
  traefik:
    image: traefik:v2.8.1
    # placement:
    #   constraints:
    #     - node.labels.traefik-public.traefik-public-certificates == true
    command:
      - --entrypoints.http.address=:80
      - --entrypoints.https.address=:443
      - --providers.docker=true
      - --providers.docker.swarmmode
      - --providers.docker.exposedbydefault=false
      - --providers.docker.constraints=Label(`traefik.constraint-label`, `traefik-public`)
      - --api
      - --certificatesresolvers.le.acme.email=bonefont.work@gmail.com
      - --certificatesresolvers.le.acme.storage=/certificates/acme.json
      - --certificatesresolvers.le.acme.tlschallenge=true
      
      # - traefik.http.routers.traefik-public-https.middlewares=admin-auth
    ports:
      - 80:80
      - 443:443
      - 8080:8080
    # deploy:
    #   placement:
    #     constraints:
    #       - node.labels.traefik-public.traefik-public-certificates == true
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - traefik-public-certificates:/certificates
    networks:
      - traefik-public
    # labels:
    #   - traefik.docker.network=traefik-public
    #   - traefik.constraint-label=traefik-public
    #   - traefik.http.middlewares.admin-auth.basicauth.users=traefik:password

    #   - traefik.http.routers.traefik-public-http.rule=Host(`api.testdomain`)
    #   - traefik.http.routers.traefik-public-http.entrypoints=http
    #   - traefik.http.routers.traefik-public-http.middlewares=https-redirect
    #   # traefik-https the actual router using HTTPS
    #   # Uses the environment variable DOMAIN
    #   - traefik.http.routers.traefik-public-https.rule=Host(`api.testdomain`)
    #   - traefik.http.routers.traefik-public-https.entrypoints=https
    #   - traefik.http.routers.traefik-public-https.tls=true

    #   - traefik.http.routers.traefik-public-https.service=api@internal
    #   - traefik.http.routers.traefik-public-https.tls.certresolver=le
      
    #   - traefik.http.routers.traefik-public-https.middlewares=admin-auth
      # - traefik.http.services.traefik-public.loadbalancer.server.port=3000
volumes:
  # Create a volume to store the certificates, there is a constraint to make sure
  # Traefik is always deployed to the same Docker node with the same volume containing
  # the HTTPS certificates
  traefik-public-certificates:
networks:
# #   # Use the previously created public network "traefik-public", shared with other
# #   # services that need to be publicly available via this Traefik
  traefik-public:
    driver: overlay 
  # my-app:
  #   image: traefik/whoami:v1.7.1
#     # Use the latest Traefik image
#     image: traefik:v2.8.1
#     ports:
#       # Listen on port 80, default for HTTP, necessary to redirect to HTTPS
#       - 5001:80
#       - 5002:8080
#       # Listen on port 443, default for HTTPS
#       - 443:443
#     networks:
#       - traefik-public

#     deploy:
#       placement:
#         constraints:
#           - node.labels.traefik-public.traefik-public-certificates == true
#           - node.role == manager
#     labels:
#       - traefik.enable=true
#       - traefik.docker.network=traefik-public
#       - traefik.constraint-label=traefik-public

#       - traefik.http.services.reverse-proxy.loadbalancer.server.port=80

#       - traefik.http.middlewares.admin-auth.basicauth.users=adminname:adminpassword
#       # https-redirect middleware to redirect HTTP to HTTPS
#       # It can be re-used by other stacks in other Docker Compose files
#       # - traefik.http.middlewares.https-redirect.redirectscheme.scheme=https
#       # - traefik.http.middlewares.https-redirect.redirectscheme.permanent=true
#       # traefik-http set up only to use the middleware to redirect to https
#       # Uses the environment variable DOMAIN

#       # - traefik.http.routers.traefik-public-http.rule=Host("test.localhost")
#       - traefik.http.routers.traefik-public-http.entrypoints=http
#       - traefik.http.routers.traefik-public-http.middlewares=https-redirect
#       # traefik-https the actual router using HTTPS
#       # Uses the environment variable DOMAIN

#       # - traefik.http.routers.traefik-public-https.rule=Host("test.localhost")
#       # - traefik.http.routers.traefik-public-https.entrypoints=https
#       # - traefik.http.routers.traefik-public-https.tls=true
#       # Use the special Traefik service api@internal with the web UI/Dashboard
#       - traefik.http.routers.traefik-public-https.service=api@internal
#       # Use the "le" (Let's Encrypt) resolver created below
#       # - traefik.http.routers.traefik-public-https.tls.certresolver=le
#       # Enable HTTP Basic auth, using the middleware created above
#       - traefik.http.routers.traefik-public-https.middlewares=admin-auth
#       # Define the port inside of the Docker service to use
#       - traefik.http.services.traefik-public.loadbalancer.server.port=3000
      
#     volumes:
#       # Add Docker as a mounted volume, so that Traefik can read the labels of other services
#       - /var/run/docker.sock:/var/run/docker.sock:ro
#       # - type: npipe
#       #   source: \\.\pipe\docker_engine
#       #   target: \\.\pipe\docker_engine
#       # Mount the volume to store the certificates
#       - traefik-public-certificates:/certificates
#     command:
#       # Enable Docker in Traefik, so that it reads labels from Docker services
#       - --providers.docker
#       # Add a constraint to only use services with the label "traefik.constraint-label=traefik-public"
#       - --providers.docker.constraints=Label(`traefik.constraint-label`, `traefik-public`)
#       # Do not expose all Docker services, only the ones explicitly exposed
#       - --providers.docker.exposedbydefault=false
#       # Enable Docker Swarm mode
#       - --providers.docker.swarmmode
#       # Create an entrypoint "http" listening on address 80
#       - --entrypoints.http.address=:80
#       # Create an entrypoint "https" listening on address 80
#       # - --entrypoints.https.address=:443
#       # Create the certificate resolver "le" for Let's Encrypt, uses the environment variable EMAIL
#       # - --certificatesresolvers.le.acme.email=bonefont.work@gmail.com
#       # Store the Let's Encrypt certificates in the mounted volume
#       # - --certificatesresolvers.le.acme.storage=/certificates/acme.json
#       # Use the TLS Challenge for Let's Encrypt
#       # - --certificatesresolvers.le.acme.tlschallenge=true
#       # Enable the access log, with HTTP requests
#       - --accesslog
#       # Enable the Traefik log, for configurations and errors
#       - --log
#       # Enable the Dashboard and API
#       - --api.dashboard=true
# volumes:
#   # Create a volume to store the certificates, there is a constraint to make sure
#   # Traefik is always deployed to the same Docker node with the same volume containing
#   # the HTTPS certificates
#   traefik-public-certificates:
# networks:
# #   # Use the previously created public network "traefik-public", shared with other
# #   # services that need to be publicly available via this Traefik
#   traefik-public:
#     driver: overlay 

# # volumes:
